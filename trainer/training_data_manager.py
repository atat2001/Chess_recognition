"""
Useful to manage the information generated by the trainer gui
"""
import os
import shutil
import random
# Deletes the finetuning data(data generated by trainer gui)
def delete_predictions():
    current_dir = os.path.dirname(os.path.abspath(__file__))

    prediction_folder = os.path.join(current_dir,'square_data')
    prediction_folders = os.listdir(prediction_folder)
    for x in prediction_folders:
        folder_path = os.path.join(prediction_folder, x)
        for file in os.listdir(folder_path):
            file_path = os.path.join(folder_path, file)
            os.remove(file_path)
            #print(f"Removed {file_path}")

# Passes information from the finetunning to the normal training
def pass_information():
    current_dir = os.path.dirname(os.path.abspath(__file__))

    prediction_folder = os.path.join(current_dir,'square_data')
    prediction_folders = os.listdir(prediction_folder)
    data_folder = os.path.join(os.path.join(os.path.join(current_dir, ".."), "tactic_to_fen"), 'data')
    for x in prediction_folders:
        for file in os.listdir(prediction_folder + "/" + x):
            src = prediction_folder + "/" + x + "/" + file
            dest = data_folder + "/" + x + "/" + file
            shutil.move(src, dest)
            print(f"Moved {src} to {dest}")

def ensure_every_class_has_images():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    data_folder = os.path.join(os.path.join(os.path.join(current_dir, ".."), "tactic_to_fen"), 'data')
    finetuning_data = os.path.join(current_dir,'square_data')

    classes = os.listdir(data_folder)
    for c in classes:
        if len(os.listdir(os.path.join(finetuning_data, c))) == 0:
            class_data_folder = os.path.join(data_folder, c)
            random_image = random.choice(os.listdir(class_data_folder))  ## get a random image
            src = os.path.join(class_data_folder, random_image)
            dest = os.path.join(os.path.join(finetuning_data, c), 'tmp.jpeg')
            shutil.copyfile(src, dest)
            print(f"Copied {src} to {dest}")
    return True

def destroy_tmp_files():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    finetuning_data = os.path.join(current_dir,'square_data')
    for c in os.listdir(finetuning_data):
        tmp_file = os.path.join(finetuning_data, c, 'tmp.jpeg')
        if os.path.exists(tmp_file):
            os.remove(tmp_file)
            print(f"Removed {tmp_file}")
    return True
#delete_predictions()

#pass_information()